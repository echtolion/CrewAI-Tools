from langchain.tools import tool

@tool
def build_autogen_skill_tool(input_string: str) -> str:
    # Parse the input string to extract parameters
    params = input_string.split('|')
    skill_description = params[0].strip() if params else None
    app_directory = params[1].strip() if len(params) > 1 else '/home/emoore/TaskWeaver/project/'

    # Check if skill_description is provided
    if not skill_description:
        return "Error: skill_description is required. Usage: build_autogen_skill_tool('skill_description|app_directory')."

    # Assuming TaskWeaverApp and related functionality are defined elsewhere and accessible
    from taskweaver.app.app import TaskWeaverApp
    app = TaskWeaverApp(app_dir=app_directory)
    session = app.get_session()
    
    # Detailed prompt for creating the skill
    detailed_prompt = ("Create a robust Python function to be used as a skill. The function should handle arguments appropriately, "
                       "be verbose with errors for troubleshooting, include usage instructions when called incorrectly, "
                       "and ensure no hardcoded values are present outside of a test block. "
                       f"Skill description: {skill_description}")
    
    # Send the prompt to the session and get the response
    response_round = session.send_message(detailed_prompt)
    return response_round.to_dict()

# Usage example for the tool
if __name__ == '__main__':
    test_input = "create a skill to search for an article on Wikipedia and return the summary|/home/emoore/TaskWeaver/project/"
    print(build_autogen_skill_tool(test_input))
