from langchain.tools import tool  # Import the tool decorator
import undetected_chromedriver as uc  # Import undetected_chromedriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from dotenv import load_dotenv  # Import load_dotenv from python-dotenv
import os
import random

# Load .env file
load_dotenv()

# Function to clean URLs
def clean_url(url):
    start_pos = url.find('https://', url.find('https://') + 1)
    end_pos = url.find('&', start_pos)
    return url[start_pos:end_pos]

# Tool to scrape PAA sections using a random proxy from the .env file
@tool(name="ScrapePAAWithProxy", description="Scrapes 'People Also Ask' sections using a random proxy from the .env file.")
def scrape_paa_with_proxy(data_initq_value):
    # Retrieve proxy list from .env file and split into a list
    proxy_list = os.getenv('proxy_list').split(',')

    # Randomly select a proxy from the list
    selected_proxy = random.choice(proxy_list).strip()

    options = uc.ChromeOptions()

    # Set the selected proxy
    options.add_argument(f'--proxy-server={selected_proxy}')

    driver = uc.Chrome(options=options)

    try:
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, f"//div[@data-initq='{data_initq_value}']"))
        )

        paa_data = []
        paa_sections = driver.find_elements(By.XPATH, f"//div[@data-initq='{data_initq_value}']")

        for section in paa_sections:
            question_text = section.text
            description_container = section.find_element(By.XPATH, ".//div[@data-attrid='wa:/description']")
            description = description_container.text
            link_container = description_container.find_element(By.XPATH, "./following-sibling::a[1]")
            raw_link = link_container.get_attribute('href')
            cleaned_link = clean_url(raw_link)

            paa_data.append({
                "question": question_text,
                "description": description,
                "link": cleaned_link
            })
    finally:
        driver.quit()  # Ensure the driver is quit properly

    return paa_data
